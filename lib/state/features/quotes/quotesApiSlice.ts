// Need to use the React-specific entry point to import `createApi`
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";

interface Quote {
  id: number;
  quote: string;
  author: string;
}

interface QuotesApiResponse {
  quotes: Quote[];
  total: number;
  skip: number;
  limit: number;
}

interface UpdateQuote {
  id: string;
  quote: Omit<Quote, "id">;
}

// Define a service using a base URL and expected endpoints
export const quotesApiSlice = createApi({
  baseQuery: fetchBaseQuery({ baseUrl: "https://dummyjson.com" }),
  reducerPath: "quotesApi",
  // Tag types are used for caching and invalidation.
  tagTypes: ["Quotes"],
  endpoints: (build) => ({
    // Supply generics for the return type (in this case `QuotesApiResponse`)
    // and the expected query argument. If there is no argument, use `void`
    // for the argument type instead.
    getQuotes: build.query<QuotesApiResponse, number>({
      query: (limit = 10) => `/quotes?limit=${limit}`,
      // `providesTags` determines which 'tag' is attached to the
      // cached data returned by the query.
      providesTags: (result, error, id) => [{ type: "Quotes", id }],
    }),
    getQuoteById: build.query<Quote, number>({
      query: (id) => `/quotes/${id}`,
      providesTags: (result, error, id) => [{ type: "Quotes", id }],
    }),

    addNewQuote: build.mutation<Quote, Omit<Quote, "id">>({
      query: (quote) => ({
        // this is fake api
        url: `/quotes/add`,
        method: "POST",
        header: { "Content-Type": "application/json" },
        body: quote,
      }),
    }),
    updateNewQuote: build.mutation<Quote, UpdateQuote>({
      query: ({ id, quote }) => ({
        // this is fake api
        url: `/quotes/${id}`,
        method: "POST",
        header: { "Content-Type": "application/json" },
        body: quote,
      }),
    }),
  }),
});

// Hooks are auto-generated by RTK-Query
// Same as `quotesApiSlice.endpoints.getQuotes.useQuery`
export const {
  useGetQuotesQuery,
  useGetQuoteByIdQuery,
  useAddNewQuoteMutation,
  useUpdateNewQuoteMutation,
} = quotesApiSlice;
